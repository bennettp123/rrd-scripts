#!/usr/bin/perl
use Fcntl qw(LOCK_EX LOCK_NB);
use File::NFSLock;

# Try to get an exclusive lock on myself.
my $lock = File::NFSLock->new($0, LOCK_EX|LOCK_NB);
die "$0 is already running!\n" unless $lock;

use RRDs;
use LWP::UserAgent;
use File::stat;
use File::HomeDir;
use Time::localtime;

# define location of rrdtool databases
my $rrd = File::HomeDir->my_home . '/.rrd/db/apache2.rrd';
# define location of images
my $img = File::HomeDir->my_home . '/.rrd/img';
# define your apache stats URL
my $URL = 'http://localhost/status/?auto';
# apache2 pidfile -- used to detect when server is restarted
my $apache2_pidfile = '/var/run/apache2.pid';
# stores the most recent pid -- used to detect when the server is restarted
my $apache2_last_pidfile = File::HomeDir->my_home . '/.rrd/apache2_last_pid';
# true if server has been restarted
my $apache2_has_been_restarted = 0;
# the time when the server was last restarted
my $server_restarted_time;

my $apache2_current_pid;
open(my $fh, '<', $apache2_pidfile) or goto missing_pid;
{
	local $/;
	$apache2_current_pid = <$fh>;
}
close($fh);
chomp $apache2_current_pid;
$apache2_current_pid =~ /(\d+)/;
$apache2_current_pid = $1;

my $apache2_last_pid;
open(my $fh, '<', $apache2_last_pidfile) or goto missing_pid;
$server_restarted_time = stat($fh)->mtime;
{
	local $/;
	$apache2_last_pid = <$fh>;
}
close($fh);
chomp $apache2_last_pid;
$apache2_last_pid =~ /(\d+)/;
$apache2_last_pid = $1;

if($apache2_current_pid =~ /^\d+$/ and $apache2_last_pid =~ /^\d+$/) {
	if($apache2_current_pid != $apache2_last_pid) {
		$apache2_has_been_restarted = 'yes';
	}
}

missing_pid:
# continue silently.:)

if($apache2_current_pid =~ /^(\d+)$/) {
	open(my $fh, '>', $apache2_last_pidfile) or do {
		print STDERR "warning: couldn't write pidfile $apache2_last_pidfile: $!\n";
		goto couldnt_write_pidfile;
	};
	print $fh "$1\n";
	close($fh);
}

couldnt_write_pidfile:
# continue silently.:)

my $ua = LWP::UserAgent->new(timeout => 30);
my $response = $ua->request(HTTP::Request->new('GET', $URL));

my $accesses_total = 0;
my $kbyes_total = 0;
my $cpuload = 0;
my $uptime = 0;
my $req_persec = 0;
my $bytes_persec = 0;
my $workers_busy = 0;
my $workser_idle = 0;
my $scoreboard = "";

foreach (split(/\n/, $response->content)) {
	$accesses_total = $1 if (/^Total Accesses:\s+([\d\.]+)/i);
	$kbyes_total = $1 if (/^Total kBytes:\s+([\d\.]+)/i);
	$cpuload = $1 if (/^CPULoad:\s+([\d\.]+)/i);
	$uptime = $1 if (/^Uptime:\s+([\d\.]+)/i);
	$req_persec = $1 if (/^ReqPerSec:\s+([\d\.]+)/i);
	$bytes_persec = $1 if (/^BytesPerSec:\s+([\d\.]+)/i);
	$bytes_perreq = $1 if (/BytesPerReq:\s+([\d\.]+)/i);
	$workers_busy = $1 if (/^BusyWorkers:\s+([\d\.]+)/i);
	$workers_idle = $1 if (/^IdleWorkers:\s+([\d\.]+)/i);
	#$scoreboard = $1 if (/^Scoreboard:\s+(\d+)/);
}

#print "AT:$accesses_total; KBT:$kbyes_total; CPU:$cpuload; UP:$uptime; RPS:$req_persec; BPS:$bytes_persec; BPR:$bytes_perreq; WB:$workers_busy; WI:$workers_idle;\n";

# if rrdtool database doesn't exist, create it
if (! -e "$rrd") {
  RRDs::create "$rrd",
        "-s 60",
	"DS:requests:DERIVE:120:0:100000000",
	"DS:kbytes:DERIVE:120:0:100000000",
	"DS:cpuload:GAUGE:120:0:60000",
	"DS:uptime:GAUGE:120:0:100000000",
	"DS:req_persec:GAUGE:120:0:100000000",
	"DS:bytes_persec:GAUGE:120:0:100000000",
	"DS:bytes_prereq:GAUGE:120:0:100000000",
	"DS:busy_workers:GAUGE:120:0:60000",
	"DS:idle_workers:GAUGE:120:0:60000",
	"RRA:AVERAGE:0.5:1:2880",
	"RRA:AVERAGE:0.5:30:672",
	"RRA:AVERAGE:0.5:120:732",
	"RRA:AVERAGE:0.5:720:1460";
}

# insert values into rrd database
if($apache2_has_been_restarted and defined($server_restarted_time)) {
	printf STDERR "warning: detected server restart; injecting 'U:U:U:U:U'.\n";
	RRDs::update "$rrd",
	  "-t", "requests:kbytes:cpuload:uptime:req_persec:bytes_persec:bytes_prereq:busy_workers:idle_workers",
	  "$server_restarted_time:U:U:U:U:U:U:U:U:U";
	RRDs::update "$rrd",
	  "-t", "requests:kbytes:cpuload:uptime:req_persec:bytes_persec:bytes_prereq:busy_workers:idle_workers",
	  "N:U:U:U:U:U:U:U:U:U";
} else {
	RRDs::update "$rrd",
	  "-t", "requests:kbytes:cpuload:uptime:req_persec:bytes_persec:bytes_prereq:busy_workers:idle_workers",
	  "N:$accesses_total:$kbyes_total:$cpuload:$uptime:$req_persec:$bytes_persec:$bytes_perreq:$workers_busy:$workers_idle";
}

